from flask import Flask, jsonify, request
from flask_cors import CORS
import base64
import io
import matplotlib
import matplotlib.pyplot as plt
import pandas as pd
from wordcloud import WordCloud
from collections import defaultdict
import numpy as np
from datetime import datetime, timedelta
import re
import logging
import json
import os
import matplotlib.font_manager as fm
import random
import pymysql
from pymysql import Error

# 配置日志
logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')
logger = logging.getLogger(__name__)

# 设置绘图后端
matplotlib.use('Agg')
plt.rcParams['font.sans-serif'] = ['SimHei', 'DejaVu Sans', 'Arial', 'sans-serif']
plt.rcParams['axes.unicode_minus'] = False

app = Flask(__name__)
CORS(app)

# 数据库配置
DB_CONFIG = {
    'host': 'localhost',
    'user': 'root',
    'password': '111111',
    'database': 'cpi_data',
    'port': 3306
}

# 全国省份列表
PROVINCES = [
    "北京市", "天津市", "河北省", "山西省", "内蒙古自治区",
    "辽宁省", "吉林省", "黑龙江省", "上海市", "江苏省",
    "浙江省", "安徽省", "福建省", "江西省", "山东省",
    "河南省", "湖北省", "湖南省", "广东省", "广西壮族自治区",
    "海南省", "重庆市", "四川省", "贵州省", "云南省",
    "西藏自治区", "陕西省", "甘肃省", "青海省", "宁夏回族自治区",
    "新疆维吾尔自治区"
]

# 地理区域分组
REGIONS = {
    "华北": ["北京市", "天津市", "河北省", "山西省", "内蒙古自治区"],
    "东北": ["辽宁省", "吉林省", "黑龙江省"],
    "华东": ["上海市", "江苏省", "浙江省", "安徽省", "福建省", "江西省", "山东省"],
    "华中": ["河南省", "湖北省", "湖南省"],
    "华南": ["广东省", "广西壮族自治区", "海南省"],
    "西南": ["重庆市", "四川省", "贵州省", "云南省", "西藏自治区"],
    "西北": ["陕西省", "甘肃省", "青海省", "宁夏回族自治区", "新疆维吾尔自治区"]
}


# 创建数据库连接
def create_db_connection():
    try:
        connection = pymysql.connect(**DB_CONFIG)
        logger.info("数据库连接成功")
        return connection
    except Error as e:
        logger.error(f"数据库连接失败: {str(e)}")
        return None


# 初始化数据库
def initialize_database():
    try:
        connection = create_db_connection()
        if connection is None:
            return False

        with connection.cursor() as cursor:
            # 创建表
            create_table_query = """
            CREATE TABLE IF NOT EXISTS provincial_cpi (
                id INT AUTO_INCREMENT PRIMARY KEY,
                province VARCHAR(50) NOT NULL,
                date VARCHAR(10) NOT NULL,
                cpi DECIMAL(5,2) NOT NULL,
                UNIQUE KEY unique_province_date (province, date)
            )
            """
            cursor.execute(create_table_query)
            connection.commit()
            logger.info("数据库表创建成功")

        return True
    except Error as e:
        logger.error(f"数据库初始化失败: {str(e)}")
        return False
    finally:
        if connection:
            connection.close()


# 省级CPI数据
def generate_provincial_cpi_data():
    start_date = datetime(2010, 1, 1)
    end_date = datetime(2024, 5, 1)
    data = []

    # 基准CPI（全国平均）
    base_cpi = {}
    current_date = start_date
    current_cpi = 100.0
    while current_date <= end_date:
        # CPI随机波动
        change = np.random.normal(0.1, 0.2)
        current_cpi = max(95, min(105, current_cpi * (1 + change / 100)))
        base_cpi[current_date.strftime('%Y-%m')] = round(current_cpi, 2)
        current_date += timedelta(days=31)  # 近似每月

    # 为每个省份数据
    for province in PROVINCES:
        # 每个省份有自己的波动特性
        province_factor = np.random.uniform(0.8, 1.2)
        volatility = np.random.uniform(0.05, 0.2)

        current_date = start_date
        while current_date <= end_date:
            date_str = current_date.strftime('%Y-%m')
            base_value = base_cpi[date_str]

            # 省份CPI = 全国CPI * 省份因子 + 随机波动
            province_value = base_value * province_factor + np.random.normal(0, volatility)
            province_value = max(95, min(110, province_value))

            data.append({
                "province": province,
                "date": date_str,
                "cpi": round(province_value, 2)
            })
            current_date += timedelta(days=31)

    return data


# 保存数据到数据库
def save_data_to_db(data):
    try:
        connection = create_db_connection()
        if connection is None:
            return False

        with connection.cursor() as cursor:
            # 批量插入数据
            insert_query = """
            INSERT INTO provincial_cpi (province, date, cpi)
            VALUES (%(province)s, %(date)s, %(cpi)s)
            ON DUPLICATE KEY UPDATE cpi = VALUES(cpi)
            """

            # 分批插入，每批1000条
            batch_size = 1000
            for i in range(0, len(data), batch_size):
                batch = data[i:i + batch_size]
                cursor.executemany(insert_query, batch)
                connection.commit()
                logger.info(f"已插入 {min(i + batch_size, len(data))}/{len(data)} 条数据")

        return True
    except Error as e:
        logger.error(f"数据保存到数据库失败: {str(e)}")
        return False
    finally:
        if connection:
            connection.close()


# 从数据库加载数据
def load_data_from_db():
    try:
        connection = create_db_connection()
        if connection is None:
            return []

        with connection.cursor() as cursor:
            cursor.execute("SELECT province, date, cpi FROM provincial_cpi")
            result = cursor.fetchall()

            # 转换为字典列表
            data = []
            for row in result:
                data.append({
                    "province": row[0],
                    "date": row[1],
                    "cpi": float(row[2])
                })

            logger.info(f"从数据库加载了 {len(data)} 条CPI数据")
            return data
    except Error as e:
        logger.error(f"从数据库加载数据失败: {str(e)}")
        return []
    finally:
        if connection:
            connection.close()


# 加载或生成省级CPI数据
def load_provincial_cpi_data():
    # 初始化数据库
    if not initialize_database():
        logger.error("数据库初始化失败")
        return []

    # 尝试从数据库加载数据
    data = load_data_from_db()
    if data:
        return data

    # 如果没有数据，生成模拟数据并保存到数据库
    logger.info("生成省级CPI模拟数据...")
    data = generate_provincial_cpi_data()

    if save_data_to_db(data):
        logger.info("省级CPI数据已保存到数据库")
    else:
        logger.error("保存省级CPI数据到数据库失败")

    return data


# 省级CPI数据
PROVINCIAL_CPI_DATA = load_provincial_cpi_data()


# 解析日期
def parse_date(date_str):
    try:
        # 尝试常见日期格式
        if re.match(r'^\d{4}-\d{1,2}$', date_str):
            return datetime.strptime(date_str, '%Y-%m')
        elif re.match(r'^\d{4}年\d{1,2}月$', date_str):
            return datetime.strptime(date_str, '%Y年%m月')
        elif re.match(r'^\d{6}$', date_str):
            return datetime.strptime(date_str, '%Y%m')

        # 尝试其他可能格式
        for fmt in ('%Y-%m-%d', '%Y/%m/%d', '%Y%m%d'):
            try:
                return datetime.strptime(date_str, fmt)
            except:
                continue
    except Exception:
        pass

    logger.warning(f"无法解析日期: {date_str}, 使用当前日期")
    return datetime.now()


# 保存图表为Base64
def save_plot_to_base64(fig):
    try:
        buf = io.BytesIO()
        fig.savefig(buf, format='png', dpi=120, bbox_inches='tight')
        plt.close(fig)
        buf.seek(0)
        return base64.b64encode(buf.read()).decode('utf-8')
    except Exception as e:
        logger.error(f"保存图表失败: {str(e)}")
        return None


# 查找可用中文字体
def find_chinese_font():
    # 常见中文字体路径
    font_paths = [
        # Windows
        "C:/Windows/Fonts/simhei.ttf",  # 黑体
        "C:/Windows/Fonts/simkai.ttf",  # 楷体
        "C:/Windows/Fonts/msyh.ttc",  # 微软雅黑
        "C:/Windows/Fonts/simfang.ttf",  # 仿宋

        # Linux
        "/usr/share/fonts/truetype/wqy/wqy-zenhei.ttc",  # 文泉驿正黑
        "/usr/share/fonts/opentype/noto/NotoSansCJK-Regular.ttc",  # Noto Sans

        # macOS
        "/System/Library/Fonts/PingFang.ttc",  # 苹方
        "/Library/Fonts/Arial Unicode.ttf"
    ]

    # 检查字体是否存在
    for path in font_paths:
        if os.path.exists(path):
            logger.info(f"使用中文字体: {path}")
            return path

    # 尝试matplotlib内置字体
    try:
        font = fm.FontProperties(family='sans-serif')
        path = fm.findfont(font)
        logger.warning(f"使用默认字体: {path}")
        return path
    except Exception:
        pass

    logger.error("未找到中文字体，词云可能无法显示中文")
    return None


# 生成CPI词云
def generate_cpi_wordcloud(descriptions):
    try:
        if not descriptions:
            logger.warning("词云描述为空，使用默认关键词")
            descriptions = ['CPI', '消费价格', '通货膨胀', '经济指标']

        # 统计词频
        word_freq = defaultdict(int)
        for word in descriptions:
            word_freq[word] += 1

        logger.info(f"生成词云，关键词数量: {len(word_freq)}")

        # 获取字体路径
        font_path = find_chinese_font()

        # 创建词云
        wc = WordCloud(
            width=800,
            height=500,
            background_color='white',
            max_words=100,
            font_path=font_path,
            colormap='viridis',
            prefer_horizontal=0.7,
            collocations=False
        )

        # 生成词云
        wordcloud = wc.generate_from_frequencies(word_freq)

        # 创建图表
        plt.figure(figsize=(10, 6))
        plt.imshow(wordcloud, interpolation='bilinear')
        plt.axis('off')
        plt.title('CPI分析词云', fontsize=16)
        plt.tight_layout()

        # 保存图像
        img_base64 = save_plot_to_base64(plt.gcf())
        if img_base64:
            logger.info("词云图生成成功")
        else:
            logger.error("词云图Base64转换失败")

        return img_base64
    except Exception as e:
        logger.error(f"生成词云图失败: {str(e)}")
        return None


# 分析省级CPI数据
def analyze_provincial_cpi_data(df, province=None):
    if df.empty:
        return {'analysis_img': None, 'wordcloud_img': None, 'statistics': {}, 'raw_data': []}

    try:
        # 准备数据
        df['sort_date'] = df['date'].apply(parse_date)
        df = df.sort_values('sort_date')
        df['year'] = df['sort_date'].dt.year
        df['month'] = df['sort_date'].dt.month

        # 计算统计指标
        stats = {
            'start_date': df['sort_date'].min().strftime('%Y-%m'),
            'end_date': df['sort_date'].max().strftime('%Y-%m'),
            'data_points': len(df),
            'avg_cpi': round(df['cpi'].mean(), 2),
            'min_cpi': round(df['cpi'].min(), 2),
            'max_cpi': round(df['cpi'].max(), 2),
            'current_cpi': round(df['cpi'].iloc[-1], 2),
            'std_dev': round(df['cpi'].std(), 3),
            'last_change': round(df['cpi'].iloc[-1] - df['cpi'].iloc[-2], 3) if len(df) > 1 else 0
        }

        # 准备词云描述
        descriptions = []
        for cpi in df['cpi']:
            if cpi >= 103:
                descriptions.extend(['高通胀', '物价上涨', '经济过热', '购买力下降'])
            elif cpi <= 100:
                descriptions.extend(['通缩', '物价下跌', '经济低迷', '消费不足'])
            else:
                descriptions.extend(['稳定', '温和通胀', '正常波动', '经济平衡'])

        # 添加上下文信息
        if province:
            descriptions.extend([province, '省级CPI', '区域经济'])
        else:
            descriptions.extend(['全国', '多省份', '区域比较'])

        descriptions.extend(['CPI', '消费价格', '通货膨胀', '经济指标'])

        # 创建分析图表
        fig, axs = plt.subplots(2, 2, figsize=(14, 10))
        fig.suptitle(f"{province}CPI分析" if province else "全国省级CPI分析", fontsize=16)

        # 1. 主趋势图
        if province:
            # 单一省份：显示详细趋势
            axs[0, 0].plot(df['sort_date'], df['cpi'], 'b-', linewidth=1.5)
            axs[0, 0].set_title(f'{province}CPI趋势')

            # 添加移动平均线
            if len(df) > 12:
                df['12m_ma'] = df['cpi'].rolling(window=12).mean()
                axs[0, 0].plot(df['sort_date'], df['12m_ma'], 'r-', linewidth=1, label='12月平均')
                axs[0, 0].legend()
        else:
            # 全国视图：显示各省平均
            province_avg = df.groupby('province')['cpi'].mean().sort_values()
            province_avg.plot(kind='barh', ax=axs[0, 0], color='teal')
            axs[0, 0].set_title('各省平均CPI')

        axs[0, 0].grid(True, linestyle='--', alpha=0.3)
        axs[0, 0].set_xlabel('日期')
        axs[0, 0].set_ylabel('CPI')

        # 2. 年度分析
        if province:
            yearly_avg = df.groupby('year')['cpi'].mean()
            yearly_avg.plot(kind='bar', ax=axs[0, 1], color='teal')
            axs[0, 1].set_title('年度平均CPI')
        else:
            # 全国视图：最近月份各省CPI排名
            last_date = df['sort_date'].max()
            last_month_data = df[df['sort_date'] == last_date]
            last_month_data = last_month_data.sort_values('cpi', ascending=False)

            axs[0, 1].barh(last_month_data['province'], last_month_data['cpi'], color='skyblue')
            axs[0, 1].set_title(f'{last_date.strftime("%Y年%m月")}各省CPI排名')

        axs[0, 1].grid(axis='y', linestyle='--', alpha=0.3)
        axs[0, 1].set_xlabel('CPI')

        # 3. 月度分析
        if province:
            # 单一省份：月度季节性
            monthly_avg = df.groupby('month')['cpi'].mean()
            monthly_avg.plot(kind='line', marker='o', ax=axs[1, 0], color='purple')
            axs[1, 0].set_title('月度季节性模式')
            axs[1, 0].set_xticks(range(1, 13))
            axs[1, 0].set_xticklabels(
                ['1月', '2月', '3月', '4月', '5月', '6月', '7月', '8月', '9月', '10月', '11月', '12月'])
        else:
            # 全国视图：区域平均CPI
            region_avg = {}
            for region, provinces in REGIONS.items():
                region_df = df[df['province'].isin(provinces)]
                region_avg[region] = region_df['cpi'].mean()

            region_avg = pd.Series(region_avg).sort_values()
            region_avg.plot(kind='bar', ax=axs[1, 0], color='orange')
            axs[1, 0].set_title('区域平均CPI')

        axs[1, 0].grid(True, linestyle='--', alpha=0.3)
        axs[1, 0].set_xlabel('月份/区域')

        # 4. 近期变化
        recent = df.tail(12)
        if province:
            axs[1, 1].bar(range(len(recent)), recent['cpi'], color='skyblue')
            axs[1, 1].set_xticks(range(len(recent)))
            axs[1, 1].set_xticklabels([d.strftime('%y-%m') for d in recent['sort_date']], rotation=45, ha='right')
            axs[1, 1].set_title('近期CPI变化 (12个月)')
        else:
            # 全国视图：CPI分布直方图
            df['cpi'].plot(kind='hist', bins=15, ax=axs[1, 1], alpha=0.7, color='green')
            axs[1, 1].axvline(df['cpi'].mean(), color='red', linestyle='dashed', linewidth=1,
                              label=f'平均: {df["cpi"].mean():.2f}')
            axs[1, 1].set_title('全国CPI分布')
            axs[1, 1].legend()

        axs[1, 1].grid(True, linestyle='--', alpha=0.3)
        axs[1, 1].set_xlabel('CPI值')

        plt.tight_layout(rect=[0, 0, 1, 0.96])

        analysis_img = save_plot_to_base64(fig)
        wordcloud_img = generate_cpi_wordcloud(descriptions)

        # 准备原始数据
        raw_data = df.sort_values('sort_date', ascending=False)[['province', 'date', 'cpi']].to_dict('records')

        return {
            'analysis_img': analysis_img,
            'wordcloud_img': wordcloud_img,
            'statistics': stats,
            'raw_data': raw_data
        }
    except Exception as e:
        logger.error(f"分析失败: {str(e)}")
        return {'analysis_img': None, 'wordcloud_img': None, 'statistics': {}, 'raw_data': []}


# 分析全国CPI数据
def analyze_national_cpi_data(df):
    if df.empty:
        return {'analysis_img': None, 'wordcloud_img': None, 'comparison_img': None, 'statistics': {}, 'raw_data': []}

    try:
        # 准备数据
        df['sort_date'] = df['date'].apply(parse_date)
        df = df.sort_values('sort_date')

        # 计算全国平均CPI（每月所有省份的平均）
        national_avg = df.groupby('sort_date')['cpi'].mean().reset_index()
        national_avg.rename(columns={'cpi': 'national_cpi'}, inplace=True)

        # 获取最近月份各省份数据
        last_date = df['sort_date'].max()
        last_month_data = df[df['sort_date'] == last_date]

        # 计算统计指标
        stats = {
            'start_date': national_avg['sort_date'].min().strftime('%Y-%m'),
            'end_date': national_avg['sort_date'].max().strftime('%Y-%m'),
            'data_points': len(national_avg),
            'avg_cpi': round(national_avg['national_cpi'].mean(), 2),
            'min_cpi': round(national_avg['national_cpi'].min(), 2),
            'max_cpi': round(national_avg['national_cpi'].max(), 2),
            'current_cpi': round(national_avg['national_cpi'].iloc[-1], 2),
            'std_dev': round(national_avg['national_cpi'].std(), 3),
            'update_time': datetime.now().strftime('%Y-%m-%d %H:%M'),
            'max_province': last_month_data.loc[last_month_data['cpi'].idxmax(), 'province'],
            'min_province': last_month_data.loc[last_month_data['cpi'].idxmin(), 'province'],
            'max_cpi_province': round(last_month_data['cpi'].max(), 2),
            'min_cpi_province': round(last_month_data['cpi'].min(), 2),
            'national_avg_cpi': round(last_month_data['cpi'].mean(), 2),
            'keyword_count': 42  # 模拟关键词数量
        }

        # 准备词云描述
        descriptions = []
        for cpi in national_avg['national_cpi']:
            if cpi >= 103:
                descriptions.extend(['高通胀', '物价上涨', '经济过热', '购买力下降'])
            elif cpi <= 100:
                descriptions.extend(['通缩', '物价下跌', '经济低迷', '消费不足'])
            else:
                descriptions.extend(['稳定', '温和通胀', '正常波动', '经济平衡'])

        descriptions.extend(['全国CPI', '宏观经济', '消费价格', '通货膨胀', '经济指标'])

        # 创建全国CPI分析图表（四合一）
        fig, axs = plt.subplots(2, 2, figsize=(16, 12))
        fig.suptitle("全国CPI分析报告", fontsize=20)

        # 1. 全国CPI趋势图
        axs[0, 0].plot(national_avg['sort_date'], national_avg['national_cpi'], 'b-', linewidth=2)
        axs[0, 0].set_title('全国CPI趋势图 (2010-2024)', fontsize=14)
        axs[0, 0].grid(True, linestyle='--', alpha=0.3)
        axs[0, 0].set_xlabel('年份')
        axs[0, 0].set_ylabel('CPI')

        # 添加移动平均线
        if len(national_avg) > 12:
            national_avg['12m_ma'] = national_avg['national_cpi'].rolling(window=12).mean()
            axs[0, 0].plot(national_avg['sort_date'], national_avg['12m_ma'], 'r-', linewidth=1.5, label='12月移动平均')
            axs[0, 0].legend()

        # 2. 最近月份各省CPI排名
        last_month_data_sorted = last_month_data.sort_values('cpi', ascending=False)
        axs[0, 1].barh(last_month_data_sorted['province'], last_month_data_sorted['cpi'], color='skyblue')
        axs[0, 1].set_title(f'{last_date.strftime("%Y年%m月")}各省CPI排名', fontsize=14)
        axs[0, 1].grid(axis='x', linestyle='--', alpha=0.3)
        axs[0, 1].set_xlabel('CPI值')

        # 3. 区域平均CPI
        region_avg = {}
        for region, provinces in REGIONS.items():
            region_df = df[df['province'].isin(provinces)]
            region_avg[region] = region_df['cpi'].mean()

        region_avg = pd.Series(region_avg).sort_values()
        region_avg.plot(kind='bar', ax=axs[1, 0], color='orange')
        axs[1, 0].set_title('区域平均CPI', fontsize=14)
        axs[1, 0].grid(True, linestyle='--', alpha=0.3)
        axs[1, 0].set_xlabel('区域')
        axs[1, 0].set_ylabel('CPI')

        # 4. 全国CPI分布直方图
        df['cpi'].plot(kind='hist', bins=20, ax=axs[1, 1], alpha=0.7, color='green')
        axs[1, 1].axvline(df['cpi'].mean(), color='red', linestyle='dashed', linewidth=1.5,
                          label=f'平均值: {df["cpi"].mean():.2f}')
        axs[1, 1].set_title('全国CPI分布直方图', fontsize=14)
        axs[1, 1].legend()
        axs[1, 1].grid(True, linestyle='--', alpha=0.3)
        axs[1, 1].set_xlabel('CPI值')

        plt.tight_layout(rect=[0, 0, 1, 0.96])

        analysis_img = save_plot_to_base64(fig)

        # 创建各省份CPI对比分析图
        plt.figure(figsize=(14, 8))

        # 按CPI值排序
        last_month_data = last_month_data.sort_values('cpi', ascending=True)

        # 使用颜色区分CPI高低
        colors = []
        for cpi in last_month_data['cpi']:
            if cpi > 103:
                colors.append('#ff7f7f')  # 高CPI - 红色
            elif cpi > 101:
                colors.append('#ffbf7f')  # 中等偏高 - 橙色
            elif cpi < 99:
                colors.append('#7fbf7f')  # 低CPI - 绿色
            else:
                colors.append('#7fbfff')  # 正常CPI - 蓝色

        # 绘制水平条形图
        plt.barh(
            last_month_data['province'],
            last_month_data['cpi'],
            color=colors,
            edgecolor='black',
            alpha=0.8
        )

        # 添加数值标签
        for i, v in enumerate(last_month_data['cpi']):
            plt.text(v + 0.1, i, f"{v:.2f}", color='black', va='center', fontsize=10)

        plt.title(f'各省份CPI对比分析 ({last_date.strftime("%Y年%m月")})', fontsize=18)
        plt.xlabel('CPI值', fontsize=14)
        plt.ylabel('省份', fontsize=14)
        plt.grid(axis='x', linestyle='--', alpha=0.3)
        plt.axvline(x=100, color='black', linestyle='--', alpha=0.7)
        plt.text(100.1, len(last_month_data)-1, '基准线 (100)', color='black', fontsize=10)
        plt.tight_layout()

        comparison_img = save_plot_to_base64(plt.gcf())
        wordcloud_img = generate_cpi_wordcloud(descriptions)

        # 准备原始数据（最近12个月全国平均）
        recent_national = national_avg.tail(12)
        raw_data = []
        for _, row in recent_national.iterrows():
            raw_data.append({
                'date': row['sort_date'].strftime('%Y-%m'),
                'cpi': row['national_cpi']
            })

        return {
            'analysis_img': analysis_img,
            'wordcloud_img': wordcloud_img,
            'comparison_img': comparison_img,
            'statistics': stats,
            'raw_data': raw_data
        }
    except Exception as e:
        logger.error(f"全国CPI分析失败: {str(e)}")
        return {'analysis_img': None, 'wordcloud_img': None, 'comparison_img': None, 'statistics': {}, 'raw_data': []}


@app.route('/api/provincial-cpi-data', methods=['GET'])
def get_provincial_cpi_data():
    try:
        # 获取查询参数
        province = request.args.get('province')
        start_date = request.args.get('start_date')
        end_date = request.args.get('end_date')

        # 结果数据集
        filtered_data = []

        for item in PROVINCIAL_CPI_DATA:
            # 省份过滤
            if province and item['province'] != province:
                continue

            # 日期过滤
            item_date = parse_date(item['date'])
            if start_date:
                start_date_dt = parse_date(start_date)
                if item_date < start_date_dt:
                    continue
            if end_date:
                end_date_dt = parse_date(end_date)
                if item_date > end_date_dt:
                    continue

            filtered_data.append(item)

        # 按日期排序
        filtered_data.sort(key=lambda x: parse_date(x['date']), reverse=True)

        return jsonify({
            'status': 'success',
            'province': province or '全国',
            'count': len(filtered_data),
            'data': filtered_data[:1000]  # 限制最大返回数量
        })
    except Exception as e:
        logger.error(f"数据获取失败: {str(e)}")
        return jsonify({'status': 'error', 'message': '内部服务器错误'}), 500


@app.route('/api/provincial-cpi-analysis', methods=['GET'])
def get_provincial_cpi_analysis():
    try:
        province = request.args.get('province')

        # 创建DataFrame
        df = pd.DataFrame(PROVINCIAL_CPI_DATA)

        # 过滤省份
        if province:
            df = df[df['province'] == province]
            if df.empty:
                return jsonify({'status': 'error', 'message': '未找到该省份数据'}), 404

        # 分析数据
        result = analyze_provincial_cpi_data(df, province)
        result['province'] = province or '全国'

        return jsonify({'status': 'success', 'data': result})
    except Exception as e:
        logger.error(f"分析失败: {str(e)}")
        return jsonify({'status': 'error', 'message': '分析过程中出错'}), 500


# 新增全国CPI分析路由
@app.route('/api/national-cpi-analysis', methods=['GET'])
def get_national_cpi_analysis():
    try:
        # 创建DataFrame
        df = pd.DataFrame(PROVINCIAL_CPI_DATA)

        # 分析全国数据
        result = analyze_national_cpi_data(df)

        return jsonify({
            'status': 'success',
            'data': result
        })
    except Exception as e:
        logger.error(f"全国CPI分析失败: {str(e)}")
        return jsonify({
            'status': 'error',
            'message': '全国CPI分析过程中出错'
        }), 500


@app.route('/api/provinces', methods=['GET'])
def get_provinces():
    return jsonify({
        'status': 'success',
        'provinces': PROVINCES,
        'regions': list(REGIONS.keys())
    })


@app.route('/health', methods=['GET'])
def health_check():
    return jsonify({
        'status': 'healthy',
        'version': '3.1',
        'data_points': len(PROVINCIAL_CPI_DATA),
        'provinces': len(PROVINCES),
        'features': ['provincial', 'national']
    })


if __name__ == "__main__":
    # 预加载字体
    font_path = find_chinese_font()
    if font_path:
        plt.rcParams['font.family'] = fm.FontProperties(fname=font_path).get_name()

    app.run(host="0.0.0.0", port=5000, threaded=True)
